@mixin toggle-button-colors($background-color: $blue, $color: white) {
  background-color: $background-color;
  color: $color;
  @include transition(color .3s, background-color .3s);
  &:hover:not(.disabled):not([disabled]) {
    background-color: lighten($background-color, $default-value-to-lighten-colors-by);
  }
  &.disabled, &[disabled] {
    color: $grey;
    background-color: $light-grey;
    .disability-reason-icon {
      color: $dark-grey;
    }
  }
}

@mixin toggle-button($background-color: $blue, $color: white, $minimum-height: 28px) {
  $correct-vertical-align-for-alone-icons-of-default-size: -.385em;

  min-height: $minimum-height;
  padding: $default-gap-size / 8 3 / 4 * $default-gap-size;
  text-align: center;
  text-transform: uppercase;
  font-weight: bold;
  @include toggle-button-colors($background-color, $color);
  & > div {
    position: relative;
    display: inline-block;
    &:only-child {
      icon[size="1.25"] {
        vertical-align: $correct-vertical-align-for-alone-icons-of-default-size;
      }
    }
    icon {
      opacity: 1;
      @include transition(opacity .3s ease-out);
      &:not(.visible) {
        position: absolute;
        top: 0;
        left: 0;
        opacity: 0;
      }
    }
  }
  icon, .icon, span {
    display: inline-block;
    margin: $default-gap-size / 8;
  }
  icon, .icon {
    &[size="1.25"]:only-child {
      vertical-align: $correct-vertical-align-for-alone-icons-of-default-size;
    }
  }
}

@mixin icon-button($color: $blue) {
  display: inline-block;
  line-height: 0;
  button {
    padding: 0;
    background-color: initial;
    color: $color;
    @include transition(color .3s ease-out);
    &:hover:not([disabled]), &:focus {
      color: lighten($color, $default-value-to-lighten-colors-by);
    }
    &[disabled] {
      pointer-events: none;
      color: $light-grey;
    }
    icon {
        display: block;
    }
  }
}

@mixin form-element($input-height: 34px) {
  display: flex;
  min-height: $input-height;
  align-self: flex-start;
  align-items: center;
  &.validation-message-container {
    flex-wrap: wrap;
  }
}

@mixin z-depth($number) {
  $box-shadow: map-get((
    0: none,
    1: (0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2)),
    2: (0 4px 5px 0 rgba(0, 0, 0, 0.14), 0 1px 10px 0 rgba(0, 0, 0, 0.12), 0 2px 4px -1px rgba(0, 0, 0, 0.3)),
    3: (0 6px 10px 0 rgba(0, 0, 0, 0.14), 0 1px 18px 0 rgba(0, 0, 0, 0.12), 0 3px 5px -1px rgba(0, 0, 0, 0.3)),
    4: (0 8px 10px 1px rgba(0, 0, 0, 0.14), 0 3px 14px 2px rgba(0, 0, 0, 0.12), 0 5px 5px -3px rgba(0, 0, 0, 0.3)),
    5: (0 16px 24px 2px rgba(0, 0, 0, 0.14), 0 6px 30px 5px rgba(0, 0, 0, 0.12), 0 8px 10px -5px rgba(0, 0, 0, 0.3))
  ), $number);
  box-shadow: $box-shadow;
}

@mixin unselectable {
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

@mixin on-and-down($size) {
  @media only screen and (max-width: $size) {
    @content;
  }
}

@mixin on-sm-and-down {
  @include on-and-down($screen-sm) {
    @content;
  }
}
