@import "../styles";

@mixin without-left-and-right-margins-and-paddings {
    &:not(.with-margins-and-paddings-when-collapsed) {
        padding-left: 0 !important;
        padding-right: 0 !important;
        margin-left: 0 !important;
        margin-right: 0 !important;
    }
}

@mixin without-top-and-bottom-margins-and-paddings {
    &:not(.with-margins-and-paddings-when-collapsed) {
        padding-top: 0 !important;
        padding-bottom: 0 !important;
        margin-top: 0 !important;
        margin-bottom: 0 !important;
    }
}

@mixin collapsing($classes-suffix: null) {
    &.collapsing-vertically#{$classes-suffix} {
        height: 0;
        @include without-top-and-bottom-margins-and-paddings;
        &:not(.collapsing-horizontally#{$classes-suffix}) {
            width: auto !important;
        }
    }
    &.collapsing-horizontally#{$classes-suffix} {
        width: 0;
        @include without-left-and-right-margins-and-paddings;
        &:not(.collapsing-vertically#{$classes-suffix}) {
            height: auto !important;
        }
    }
}

@mixin expanded() {
    width: auto !important;
    height: auto !important;
    opacity: 1;
    visibility: visible;
}

[collapsible] {
    position: relative;
    transition-property: width, height, margin, padding, opacity, visibility;
    transition-duration: $collapse-and-expand-animations-duration;

    &.collapsing, &.collapsed {
        &:not(.with-visible-content-when-collapsed):not(.with-visible-first-line) {
            opacity: 0;
            visibility: hidden;
        }
        &:not(.collapsing-vertically-on-narrow-screens):not(.collapsing-horizontally-on-narrow-screens) {
            &:not(.collapsing-vertically-on-regular-screens):not(.collapsing-horizontally-on-regular-screens) {
                &:not(.collapsing-vertically):not(.collapsing-horizontally) {
                    width: auto !important;
                    height: 0;
                    @include without-top-and-bottom-margins-and-paddings();
                }
                @include collapsing();
            }
        }
        @media (max-width: $maximum-screen-width-for-mobile-layout) {
            &:not(.collapsing-vertically-on-narrow-screens):not(.collapsing-horizontally-on-narrow-screens) {
                &.collapsing-vertically-on-regular-screens, &.collapsing-horizontally-on-regular-screens {
                    @include expanded();
                }
            }
            @include collapsing('-on-narrow-screens');
        }
        @media (min-width: $minimum-screen-width-for-regular-layout) {
            &:not(.collapsing-vertically-on-regular-screens):not(.collapsing-horizontally-on-regular-screens) {
                &.collapsing-vertically-on-narrow-screens, &.collapsing-horizontally-on-narrow-screens {
                    @include expanded();
                }
            }
            @include collapsing('-on-regular-screens');
        }
    }

    &.collapsing, &.expanding, &.collapsed {
        &:not(.with-visible-first-line){
            overflow: hidden;
        }
    }

    &.with-visible-first-line {
        min-height: $default-line-height * 1em;
        transition-property: height, color;
        overflow: visible;
        .text-container::first-line {
            color: $default-text-color;
        }
        &.collapsed, &.collapsing {
            width: auto !important;
            height: 0;
            color: transparent;
        }
        &.expanded, &.expanding {
            color: $default-text-color;
        }
    }
}

.expand-toggle, .horizontally-expand-toggle {
    svg {
        transition: transform $collapse-and-expand-animations-duration;
    }
}

.expand-toggle.toggled  {
    svg {
        transform: rotate(90deg);
    }
}

.horizontally-expand-toggle-on-regular-screens.toggled {
    @media (min-width: $minimum-screen-width-for-regular-layout) {
        svg {
            transform: rotate(180deg);
        }
    }
}

.horizontally-expand-toggle.toggled {
    svg {
        transform: rotate(180deg);
    }
}
